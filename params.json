{"name":"jekyll-assets","tagline":"Unleash Mr Hyde!","body":"[![](https://travis-ci.org/jekyll/jekyll-assets.png?branch=master)][travis]\r\n[![](https://coveralls.io/repos/jekyll/jekyll-assets/badge.png?branch=master)][coveralls]\r\n[![](https://codeclimate.com/github/jekyll/jekyll-assets/badges/gpa.svg)][code-climate] [![](https://gemnasium.com/jekyll/jekyll-assets.svg)][gemnasium]\r\n\r\n[gemnasium]: https://gemnasium.com/jekyll/jekyll-assets\r\n[code-climate]: https://codeclimate.com/github/jekyll/jekyll-assets\r\n[coveralls]: https://coveralls.io/r/jekyll/jekyll-assets\r\n[travis]: https://travis-ci.org/jekyll/jekyll-assets\r\n\r\n# Jekyll 3 Assets\r\n\r\nJekyll 3 assets is an asset pipeline using Sprockets 3 to build especially\r\nfor Jekyll 3.  It utilizes new features of both Sprockets and Jekyll to achieve\r\na clean and extensible assets platform for Jekyll.\r\n\r\n## Using Jekyll Assets with Jekyll\r\n\r\nWhen you are using a Gemfile and bundler you need to do nothing special to get\r\nJekyll Assets to work, it will automatically load itself and work with Jekyll\r\nwhen you bundle install and run Jekyll through bundle exec. However, when you\r\nhave globally installed Gems (`gem install jekyll-assets`) then in your\r\n`_config.yml` do:\r\n\r\n```yaml\r\ngems:\r\n  - jekyll-assets\r\n```\r\n\r\n## Configuration\r\n\r\n```yaml\r\nassets:\r\n  compress:\r\n    css: false | true | default - development: false, production: true\r\n     js: false | true | default - development: false, production: true\r\n  cache: false | directory | default: .asset-cache\r\n  cdn: https://cdn.example.com\r\n  skip_baseurl_with_cdn: false\r\n   skip_prefix_with_cdn: false\r\n  prefix: \"/assets\"\r\n  assets:\r\n    - \"*.png\"\r\n    - \"bundle.css\"\r\n  digest: true\r\n  sources:\r\n    - \"_assets/folder\"\r\n```\r\n\r\n### Digesting\r\n\r\n* Disable digesting by default in development.\r\n* Digest by default in production\r\n\r\n### Compression\r\n\r\n* Requires sass and uglify.\r\n* Disable compression by default in development.\r\n* Enable by default in production.\r\n\r\n***You can force digesting with `digest: true` in your `_config.yml`***\r\n\r\n## ERB Support\r\n\r\nERB Support is removed in favor of trying to get this included on Github Pages\r\neventually (if I can.) Having ERB presents a security risk to Github because it\r\nwould allow you to use Ruby in ways they don't want you to.\r\n\r\n## Tags\r\n\r\n* image, img\r\n* javascript, js\r\n* stylesheet, css, style\r\n* asset, asset_source\r\n* asset_path\r\n\r\n### Tag Example:\r\n\r\n```liquid\r\n{% img src magick:2x alt:'This is my alt' %}\r\n{% img src magick:2x alt:'This is my alt' sprockets:accept:image/gif %}\r\n```\r\n\r\n### What do the colons mean? Proxies/Tags\r\n\r\n* `argument` is a boolean HTML argument.\r\n* `key:value` is an HTML key=\"value\" if no proxy exists.\r\n* `proxy:key:value` will set a proxy key with the given value.\r\n* `proxy:key` is a boolean argument if the proxy and key exists.\r\n* `unknown:key:value` will raise `DoubleColonError`, escape it.\r\n* `proxy:unknown:value` will raise a `UnknownProxyError`.\r\n\r\nLets say we have `sprockets` proxies and sprockets allows you to proxy accept,\r\nif you send `{% img src sprockets:accept:image/gif }` then Sprockets find_asset\r\nwill get `{ :accept => \"image/gif\" }` but if you try to proxy \"unknown\" on\r\nsprockets we will raise a Proxy error.  For more information then look at\r\n`parser_spec.rb` in the spec folder because it literally lays out the ground\r\nrules for our tags as a specification.\r\n\r\n### Current Proxies:\r\n\r\n* `sprockets:accept:<value>`\r\n* `sprockets:write_to:<value>`\r\n\r\n## Filters\r\n\r\nThere is a full suite of filters, actually, any tag and any proxy can be a\r\nfilter by way of filter arguments, take the following example:\r\n\r\n```liquid\r\n{{ src | img : \"magick:2x magick:quality:92\" }}\r\n```\r\n\r\n## Hooks\r\n\r\n* `:env => [:init]`\r\n\r\nYou can register and trigger hooks like so:\r\n\r\n```ruby\r\nJekyll::Assets::Hook.register :env, :init do\r\n  # Your Work\r\nend\r\n```\r\n\r\n## Addons\r\n\r\n* CSS Auto Prefixer - add \"autoprefixer-rails\" to your Gemfile.\r\n* ES6 Transpiler (through Babel) - add \"sprockets-es6\" to your Gemfile.\r\n* Image Magick - add \"mini_magick\"  to your Gemfile, only works with `img`, `image`.\r\n* Bootstrap - add \"bootstrap-sass\" to your Gemfile and \"@import 'bootstrap'\"\r\n* Compass - add \"compass-core\" to your Gemfile and \"@import 'compass'\"\r\n* Font Awesome - add \"font-awesome-sass\" to your Gemfile.\r\n\r\n***Please note that some of these (if not all) have trouble with Rhino --\r\n`therubyrhino` so you would probably be best to just use Node.js or io.js at\r\nthat point rather than trying to fight it.***\r\n\r\n### Image Magick Proxy arguments:\r\n\r\n* `magick:resize:<value>`\r\n* `magick:format:<value>`\r\n* `magick:quality:<value>`\r\n* `magick:rotate:<value>`\r\n* `magick:crop:<value>`\r\n* `magick:flip:<value>`\r\n* `magick:half`\r\n* `magick:2x`\r\n* `magick:4x`\r\n\r\n## Plugins where did they go?\r\n\r\nThey're dead, in the way that they were, use Hooks, they require less\r\npatching and give more flexibility to us because we can trigger them every\r\ntime we have a new environment not just occasionally.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}