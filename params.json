{"google":"UA-35573678-3","tagline":"Unleash Mr Hyde!","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"jekyll-assets","body":"# Jekyll::AssetsPlugin\r\n\r\nJekyll plugin, that adds Rails-alike assets pipeline, that means that:\r\n\r\n- It allows you to write javascript/css assets in other languages such as\r\n  CoffeeScript, Sass, Less and ERB.\r\n- It allows you to specify dependencies between your assets and automatically\r\n  concatenates them.\r\n- It allows you to minify/compress your JavaScript and CSS assets using\r\n  compressor you like: YUI, SASS, Uglifier or no compression at all.\r\n- It supports JavaScript templates for client-side rendering of strings or\r\n  markup. JavaScript templates have the special format extension `.jst` and are\r\n  compiled to JavaScript functions.\r\n- Automaticaly adds MD5 fingerprint suffix for _cache busting_. That means\r\n  that your `app.css` will become `app-908e25f4bf641868d8683022a5b62f54.css`.\r\n\r\nJekyll-Assets uses fabulous [Sprockets][sprockets] under the hood, so you may\r\nrefer to Rails guide about [Asset Pipeline][rails-guide] for detailed\r\ninformation about amazing features it gives you.\r\n\r\n*Notice:* You must have an [ExecJS][extjs] supported runtime in order to use\r\nCoffeeScript.\r\n\r\n\r\n[rails-guide]:  http://guides.rubyonrails.org/asset_pipeline.html\r\n[sprockets]:    https://github.com/sstephenson/sprockets#readme\r\n[extjs]:        https://github.com/sstephenson/execjs#readme\r\n\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'jekyll-assets'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install jekyll-assets\r\n\r\n\r\n## How to Use Jekyll-Assets\r\n\r\nFirst of all make sure to require it. Common practice is to add following line\r\ninto `_plugins/ext.rb` file:\r\n\r\n``` ruby\r\nrequire \"jekyll-assets\"\r\n```\r\n\r\nOnce plugin installed, you'll have following liquid tags available:\r\n\r\n- `javascript app`: Generates `<script>` tag for `app.js`\r\n- `stylesheet app`: Generates `<link>` tag for `app.css`\r\n- `asset_path logo.png`: Returns _resulting_ URL for `logo.png`\r\n- `asset app.css`: Returns _compiled_ body of `app.css`\r\n\r\nAll compiled assets will be stored under `assets/` dir of generated site.\r\n\r\nPipeline assets should be under your sources directory of Jekyll site. When a\r\nfile is referenced with liquid tag or with helper from another asset, Sprockets\r\nsearches the three default asset locations for it: `_assets/images`,\r\n`_assets/javascripts` and `_assets/stylesheets`.\r\n\r\nFor example these files:\r\n\r\n```\r\n_assets/stylesheets/app.css\r\n_assets/javascripts/app.js\r\n_assets/javascripts/vendor/jquery.js\r\n```\r\n\r\nwould be referenced like this:\r\n\r\n``` html\r\n{% stylesheet app %}\r\n{% javascript app %}\r\n{% javascript vendor/jquery %}\r\n```\r\n\r\nYou might want to require `vendor/jquery.js` into your `app.js`. To do so, just\r\nput following line in the beginning of your `app.js` to get it concatenated:\r\n\r\n``` javascript\r\n//= require vendor/jquery\r\n\r\n$(function () {\r\n  alert('I love BIG BOOKS!');\r\n});\r\n```\r\n\r\nNow, if you want to use CoffeScript, just add `.coffee` suffix to the file you\r\nwant and you good to go. For example, here's how your `app.js.coffe` might look\r\nlike:\r\n\r\n``` coffeescript\r\n#= require vendor/jquery\r\n\r\n$ ->\r\n  alert 'I love BIG BOOKS! And small ones too!'\r\n```\r\n\r\nNow, you might want your stylesheets and javascripts to be minified. In this\r\ncase just install `uglifier` gem and add following lines into your `config.yml`:\r\n\r\n``` yaml\r\nassets:\r\n  compress:\r\n    js:   uglifier\r\n    css:  sass\r\n```\r\n\r\nYou might want to use YUI compressor for minification. In this case install\r\n`yui-compressor` gem and put `yui` in place of `uglifier` and/or `sass` in the\r\nconfig file.\r\n\r\nLet's go crazy now! Assume you want your blog's `body` background color to be\r\nwhite all the time, but red in December. Just add `.erb` suffix extension and\r\nyou can use ruby to \"pre-process\" asset, something like this:\r\n\r\n```\r\n# file: _assets/stylesheets/app.css.sass.erb\r\n\r\nbody\r\n  background-color: <%= (12 == Date.today.month) ? \"red\" : \"white\" %>\r\n```\r\n\r\nWant more? Sure, here you are. You can use JavaScript templating with EJS or ECO\r\nfor example. Create a file `_assets/javascripts/hello.jst.ejs` with following\r\ncontents:\r\n\r\n``` html\r\n<p>Hello, <span><%= name %></span>!</p>\r\n<p><%= info %></p>\r\n```\r\n\r\nThen use it in your `app.js` file like this:\r\n\r\n``` coffeescript\r\n#= require vendor/jquery\r\n#= require hello\r\n\r\n$ ->\r\n  $(\"body\").html JST[\"hello\"]\r\n    name: \"ixti\"\r\n    info: \"I love BIG BOOKS! And small ones too!\"\r\n```\r\n\r\nThat's all. Feel free to ask questions if any on [twitter][twitter],\r\n[jabber][jabber] or [e-mail][e-mail].\r\n\r\n[twitter]:  https://twitter.com/zapparov\r\n[jabber]:   xmpp://zapparov@jabber.ru\r\n[e-mail]:   mailto://ixti@member.fsf.org\r\n\r\n\r\n## Configuration\r\n\r\nYou can fine-tune configuration by editing your `_config.yml`:\r\n\r\n    #\r\n    # Plugin: jekyll-assets\r\n    #\r\n    assets:\r\n      #\r\n      # Pathname of the destination of generated (bundled) assets relative\r\n      # to the destination of the root.\r\n      #\r\n      dirname: assets\r\n      #\r\n      # Base URL of assets paths.\r\n      #\r\n      baseurl: /assets/\r\n      #\r\n      # Pathnames where to find assets relative to the root of the site.\r\n      #\r\n      sources:\r\n        - _assets/javascripts\r\n        - _assets/stylesheets\r\n        - _assets/images\r\n      #\r\n      # Sets compressors for the specific types of file: `js`, or `css`.\r\n      # No compression by default.\r\n      #\r\n      # Possible variants:\r\n      #\r\n      #     css  => 'yui', 'sass', nil\r\n      #     js   => 'yui', 'uglifier', nil\r\n      #\r\n      compress:\r\n        js:   ~\r\n        css:  ~\r\n\r\n\r\n## \"Ben, I need help!\" (c) Brother 2\r\n\r\nFeel free to send me any comments, recommendations, suggestions. Improve this\r\nREADME, as I really suck in documenting things (thanks @imathis for pointing\r\nthis out).\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n\r\n## License\r\n\r\nCopyright (C) 2012 Aleksey V Zapparov (http://ixti.net/)\r\n\r\nThe MIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the “Software”), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n"}