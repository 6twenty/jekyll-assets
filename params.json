{"name":"jekyll-assets","tagline":"Unleash Mr Hyde!","body":"# Jekyll::AssetsPlugin\r\n\r\nJekyll plugin, that adds Rails-alike assets pipeline, that means that:\r\n\r\n- It allows you to write javascript/css assets in other languages such as\r\n  CoffeeScript, Sass, Less and ERB.\r\n- It allows you to specify dependencies between your assets and automatically\r\n  concatenates them.\r\n- It allows you to minify/compress your JavaScript and CSS assets using\r\n  compressor you like: YUI, SASS, Uglifier or no compression at all.\r\n- It supports JavaScript templates for client-side rendering of strings or\r\n  markup. JavaScript templates have the special format extension `.jst` and are\r\n  compiled to JavaScript functions.\r\n- Adds MD5 fingerprint suffix for _cache busting_. That means your `app.css`\r\n  will become `app-908e25f4bf641868d8683022a5b62f54.css`. See `cachebust`\r\n  configuration option for other variants.\r\n- Produce gzipped versions of assets. See `gzip` configuration option for\r\n  details.\r\n- [Compass][compass], [Bourbon][bourbon] and [Neat][neat] built-in support.\r\n  See \"Custom Vendors\" below.\r\n\r\n[compass]: http://compass-style.org/\r\n[bourbon]: http://bourbon.io/\r\n[neat]:    http://neat.bourbon.io/\r\n\r\nJekyll-Assets uses fabulous [Sprockets][sprockets] under the hood, so you may\r\nrefer to Rails guide about [Asset Pipeline][rails-guide] for detailed\r\ninformation about amazing features it gives you.\r\n\r\n*Note:* You must have an [ExecJS][extjs] supported runtime in order to use\r\n  CoffeeScript.\r\n\r\n\r\n[rails-guide]:  http://guides.rubyonrails.org/asset_pipeline.html\r\n[sprockets]:    https://github.com/sstephenson/sprockets#readme\r\n[extjs]:        https://github.com/sstephenson/execjs#readme\r\n\r\nFor a quick start check out [jekyll-assets introduction][jekyll-assets-intro]\r\nthat shows how to use it step by step. Also you might want to take a look on \r\n[my blog sources][ixti-blog-src] as a real-world example as well.\r\n\r\n[jekyll-assets-intro]:  http://ixti.net/software/2012/12/30/unleash-mr-hyde-introduction-of-jekyll-assets.html\r\n[ixti-blog-src]:        https://github.com/ixti/ixti.github.com\r\n\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'jekyll-assets'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install jekyll-assets\r\n\r\n\r\n## How to Use Jekyll-Assets\r\n\r\nFirst of all make sure to require it. Common practice is to add following line\r\ninto `_plugins/ext.rb` file:\r\n\r\n``` ruby\r\nrequire \"jekyll-assets\"\r\n```\r\n\r\nOnce plugin installed, you'll have following Liquid tags available:\r\n\r\n- `{% javascript app %}`: Generates `<script>` tag for `app.js`\r\n- `{% stylesheet app %}`: Generates `<link>` tag for `app.css`\r\n- `{% asset_path logo.png %}`: Returns _resulting_ URL for `logo.png`\r\n- `{% asset app.css %}`: Returns _compiled_ body of `app.css`\r\n\r\nAlso you'll have complimentary Liquid filters as well:\r\n\r\n- `{{ 'app' | javascript }}`: Generates `<script>` tag for `app.js`\r\n- `{{ 'app' | stylesheet }}`: Generates `<link>` tag for `app.css`\r\n- `{{ 'logo.png' | asset_path }}`: Returns _resulting_ URL for `logo.png`\r\n- `{{ 'app.css' | asset }}`: Returns _compiled_ body of `app.css`\r\n\r\nFilters are used mostly to render tag (or asset source) using variable that\r\nholds value of asset logical path rather than specifiyng it directly. Here's\r\nan example that speaks for itself:\r\n\r\n```\r\n{% if page.custom_css %}{{ page.custom_css | stylesheet }}{% endif %}\r\n```\r\n\r\nAll compiled assets will be stored under `assets/` dir of generated site.\r\n\r\nPipeline assets should be under your sources directory of Jekyll site. When a\r\nfile is referenced with liquid tag or with helper from another asset, Sprockets\r\nsearches the three default asset locations for it: `_assets/images`,\r\n`_assets/javascripts` and `_assets/stylesheets`.\r\n\r\nFor example these files:\r\n\r\n```\r\n_assets/stylesheets/app.css\r\n_assets/javascripts/app.js\r\n_assets/javascripts/vendor/jquery.js\r\n```\r\n\r\nwould be referenced like this:\r\n\r\n``` html\r\n{% stylesheet app %}\r\n{% javascript app %}\r\n{% javascript vendor/jquery %}\r\n```\r\n\r\nYou might want to require `vendor/jquery.js` into your `app.js`. To do so, just\r\nput following line in the beginning of your `app.js` to get it concatenated:\r\n\r\n``` javascript\r\n//= require vendor/jquery\r\n\r\n$(function () {\r\n  alert('I love BIG BOOKS!');\r\n});\r\n```\r\n\r\nIf you want to use CoffeScript, just add `.coffee` suffix to the file you want\r\nand you're good to go. For example, here's how your `app.js.coffe` might look\r\nlike:\r\n\r\n``` coffeescript\r\n#= require vendor/jquery\r\n\r\n$ ->\r\n  alert 'I love BIG BOOKS! And small ones too!'\r\n```\r\n\r\nNotice, that `vendor/jquery` is not required to be coffee script. You can easily\r\nmix CoffeeScript and vanilla JavaScript, CSS and SCSS and SASS and LESS. The\r\ndifference is only in comments styles used with _directives_.\r\n\r\nSee detailes information about these _directives_ below.\r\n\r\nYou might also want your stylesheets and javascripts to be minified. In this\r\ncase just install `uglifier` gem and add following lines into your `config.yml`:\r\n\r\n``` yaml\r\nassets:\r\n  compress:\r\n    js:   uglifier\r\n    css:  sass\r\n```\r\n\r\nIf you want to use YUI compressor for minification, install `yui-compressor`\r\ngem and put `yui` in place of `uglifier` and/or `sass` in the config file.\r\n\r\nLet's go crazy now! Assume you want your blog's `body` background color to be\r\nwhite all the time, but red if you compiled your web-site in December. Just add\r\n`.erb` suffix extension and you can use ruby in your asset like this:\r\n\r\n```\r\n// file: _assets/stylesheets/app.css.sass.erb\r\n\r\nbody\r\n  background-color: <%= (12 == Date.today.month) ? \"red\" : \"white\" %>\r\n```\r\n\r\nWant more? Sure, here you are. You can use JavaScript templating with EJS or ECO\r\nfor example. Create a file `_assets/javascripts/hello.jst.ejs` with following\r\ncontents:\r\n\r\n``` html\r\n<p>Hello, <span><%= name %></span>!</p>\r\n<p><%= info %></p>\r\n```\r\n\r\nThen use it in your `app.js` file like this:\r\n\r\n``` coffeescript\r\n#= require vendor/jquery\r\n#= require hello\r\n\r\n$ ->\r\n  $(\"body\").html JST[\"hello\"]\r\n    name: \"ixti\"\r\n    info: \"I love BIG BOOKS! And small ones too!\"\r\n```\r\n\r\nFinally, you might want to store your assets on [Amazon S3][amazon-s3] or any\r\nCDN service you like. As said previously, all compiled/processed assets got\r\nspecial MD5 checksum appended to their original filenames. So, for example,\r\nyour `app.js.coffee` will become something like:\r\n\r\n    app-4f41243847da693a4f356c0486114bc6.js\r\n\r\nBy default, generated URLs will have `/assets/` prefixes, but you will want to\r\nchange this if you are going to host assets somewhere else. This can be easily\r\nchanged via configuration:\r\n\r\n``` yaml\r\nassets:\r\n  baseurl: //my.super-cool-cdn.com/\r\n```\r\n\r\n[amazon-s3]: http://aws.amazon.com/s3\r\n\r\n\r\n### Compilation Cache\r\n\r\nTo improve build time, you can enabled compiled assets cache:\r\n\r\n``` yaml\r\nassets:\r\n  cache_assets: true\r\n```\r\n\r\nIn this case you might want to clean cache time after time:\r\n\r\n    $ jekyll assets:cleanup\r\n\r\nAlso you will need to add `.jekyll-assets-cache` path under source of your\r\njekyll site into exclusion list of your source control system (`.gitignore`\r\nfor git).\r\n\r\nAt the moment we use *FileStore* cache which keeps compiled data on file system.\r\nIf you need MemCache or Redis based store, please raise a ticket.\r\n\r\n\r\n## Custom Vendors\r\n\r\nSometimes you would like to have some 3rd-party vendors. For this purposes,\r\nnormally all you have to do is to override default assets sources in config:\r\n\r\n``` yaml\r\nassets:\r\n  sources:\r\n    - _assets/images\r\n    - _assets/javascripts\r\n    - _assets/stylesheets\r\n    - _vendors/bootstrap/stylesheets\r\n    - _vendors/bootstrap/javascripts\r\n```\r\n\r\nBut sometimes this is not enough. For example, with compass. As jekyll-assets\r\nuses Sprockets internally, you can simply append \"global\" paths into it. Just\r\nadd following line into your `_plugins/ext.rb` file:\r\n\r\n``` ruby\r\nrequire \"sprockets\"\r\n\r\nSprockets.append_path \"/my/vendor\"\r\n```\r\n\r\nThat's it, now jekyll-assets will try to look for assets inside `/my/vendor`\r\npath first.\r\n\r\n\r\n### Built-in Vendors Support\r\n\r\nFor your comfort jekyll-assets has built-in support for some popular libraries.\r\n\r\n\r\n#### Compass Support\r\n\r\nRequire `jekyll-assets/compass` to enable, e.g.:\r\n\r\n``` ruby\r\nrequire \"jekyll-assets\"\r\nrequire \"jekyll-assets/compass\"\r\n```\r\n\r\nNow you can add `@import \"compass\"` in your SASS assets to get Compass goodies.\r\n\r\n*Note* that if you want to use other than default Compass plugins/frameworks,\r\n  you must require them BEFORE `jekyll-assets/compass`.\r\n\r\n\r\n#### Bourbon Support\r\n\r\nRequire `jekyll-assets/bourbon` to enable, e.g.:\r\n\r\n``` ruby\r\nrequire \"jekyll-assets\"\r\nrequire \"jekyll-assets/bourbon\"\r\n```\r\n\r\nNow you can add `@import \"bourbon\"` in your SASS assets to get Bourbon goodies.\r\n\r\n\r\n#### Neat Support\r\n\r\nRequire `jekyll-assets/neat` to enable, e.g.:\r\n\r\n``` ruby\r\nrequire \"jekyll-assets\"\r\nrequire \"jekyll-assets/neat\"\r\n```\r\n\r\nNow you can add `@import \"neat\"` in your SASS assets to get Neat goodies.\r\n\r\n\r\n## The Directive Processor\r\n\r\n*Note:* This section extracted from [Sprockets][sprockets] README.\r\n\r\nSprockets runs the *directive processor* on each CSS and JavaScript\r\nsource file. The directive processor scans for comment lines beginning\r\nwith `=` in comment blocks at the top of the file.\r\n\r\n    //= require jquery\r\n    //= require jquery-ui\r\n    //= require backbone\r\n    //= require_tree .\r\n\r\nThe first word immediately following `=` specifies the directive\r\nname. Any words following the directive name are treated as\r\narguments. Arguments may be placed in single or double quotes if they\r\ncontain spaces, similar to commands in the Unix shell.\r\n\r\n**Note**: Non-directive comment lines will be preserved in the final\r\n  asset, but directive comments are stripped after\r\n  processing. Sprockets will not look for directives in comment blocks\r\n  that occur after the first line of code.\r\n\r\n\r\n### Supported Comment Types\r\n\r\nThe directive processor understands comment blocks in three formats:\r\n\r\n    /* Multi-line comment blocks (CSS, SCSS, JavaScript)\r\n     *= require foo\r\n     */\r\n\r\n    // Single-line comment blocks (SCSS, JavaScript)\r\n    //= require foo\r\n\r\n    # Single-line comment blocks (CoffeeScript)\r\n    #= require foo\r\n\r\n\r\n### Sprockets Directives\r\n\r\nYou can use the following directives to declare dependencies in asset\r\nsource files.\r\n\r\nFor directives that take a *path* argument, you may specify either a\r\nlogical path or a relative path. Relative paths begin with `./` and\r\nreference files relative to the location of the current file.\r\n\r\n#### The `require` Directive\r\n\r\n`require` *path* inserts the contents of the asset source file\r\nspecified by *path*. If the file is required multiple times, it will\r\nappear in the bundle only once.\r\n\r\n#### The `include` Directive\r\n\r\n`include` *path* works like `require`, but inserts the contents of the\r\nspecified source file even if it has already been included or\r\nrequired.\r\n\r\n#### The `require_directory` Directive\r\n\r\n`require_directory` *path* requires all source files of the same\r\nformat in the directory specified by *path*. Files are required in\r\nalphabetical order.\r\n\r\n#### The `require_tree` Directive\r\n\r\n`require_tree` *path* works like `require_directory`, but operates\r\nrecursively to require all files in all subdirectories of the\r\ndirectory specified by *path*.\r\n\r\n#### The `require_self` Directive\r\n\r\n`require_self` tells Sprockets to insert the body of the current\r\nsource file before any subsequent `require` or `include` directives.\r\n\r\n#### The `depend_on` Directive\r\n\r\n`depend_on` *path* declares a dependency on the given *path* without\r\nincluding it in the bundle. This is useful when you need to expire an\r\nasset's cache in response to a change in another file.\r\n\r\n#### The `stub` Directive\r\n\r\n`stub` *path* allows dependency to be excluded from the asset bundle.\r\nThe *path* must be a valid asset and may or may not already be part\r\nof the bundle. Once stubbed, it is blacklisted and can't be brought\r\nback by any other `require`.\r\n\r\n\r\n## Configuration\r\n\r\nYou can fine-tune configuration by editing your `_config.yml`:\r\n\r\n``` yaml\r\n#\r\n# Plugin: jekyll-assets\r\n#\r\nassets:\r\n  #\r\n  # Pathname of the destination of generated (bundled) assets relative\r\n  # to the destination of the root.\r\n  #\r\n  dirname: assets\r\n  #\r\n  # Base URL of assets paths.\r\n  #\r\n  baseurl: /assets/\r\n  #\r\n  # Pathnames where to find assets relative to the root of the site.\r\n  #\r\n  sources:\r\n    - _assets/javascripts\r\n    - _assets/stylesheets\r\n    - _assets/images\r\n  #\r\n  # Sets compressors for the specific types of file: `js`, or `css`.\r\n  # No compression by default.\r\n  #\r\n  # Possible variants:\r\n  #\r\n  #     css  => 'yui', 'sass', nil\r\n  #     js   => 'yui', 'uglifier', nil\r\n  #\r\n  compress:\r\n    js:   ~\r\n    css:  ~\r\n  #\r\n  # Sets cachebusting policy for generated assets.\r\n  #\r\n  # Possible variants:\r\n  #\r\n  #   none - disables cachebusting\r\n  #\r\n  #     source file:  _assets/javascripts/app.css\r\n  #     output file:  _site/assets/javascriptis/app.css\r\n  #     output URL:   /assets/javascripts/app.css\r\n  #\r\n  #   soft - leave filenames as-is, but `?cb=<md5>` suffix for URLs generated\r\n  #          with `asset_path`, `javascript` and `stylesheet`:\r\n  #\r\n  #     source file:  _assets/javascripts/app.css\r\n  #     output file:  _site/assets/javascriptis/app.css\r\n  #     output URL:   /assets/javascripts/app.css?cb=4f41243847da693a4f356c0486114bc6\r\n  #\r\n  #   hard - (default) injects cachebusting checksum into processed filename:\r\n  #\r\n  #     source file:  _assets/javascripts/app.css\r\n  #     output file:  _site/assets/javascriptis/app-4f41243847da693a4f356c0486114bc6.css\r\n  #     output URL:   /assets/javascripts/app-4f41243847da693a4f356c0486114bc6.css\r\n  #\r\n  cachebust: hard\r\n  #\r\n  # Whenever or not cache compiled assets (disabled by default).\r\n  # See `Compilation Cache` section of README for details.\r\n  #\r\n  cache_assets: false\r\n  #\r\n  # Specifies list of MIME types that needs to have gzipped versions.\r\n  # You can set it to `false` to disable gzipping. Only javascripts and\r\n  # stylesheets are gzipped by default.\r\n  #\r\n  gzip: [ text/css, application/javascript ]\r\n```\r\n\r\n\r\n## \"Th-th-th-that's all folks!\"\r\n\r\nFeel free to follow me on [twitter][twitter], chat via [jabber][jabber] or\r\nwrite an [e-mail][e-mail]. :D\r\n\r\n[twitter]:  https://twitter.com/zapparov\r\n[jabber]:   xmpp://zapparov@jabber.ru\r\n[e-mail]:   mailto://ixti@member.fsf.org\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n\r\n## License\r\n\r\nCopyright (C) 2012-2013 Aleksey V Zapparov (http://ixti.net/)\r\n\r\nThe MIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the “Software”), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"UA-35573678-3","note":"Don't delete this file! It's used internally to help with page regeneration."}